import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import axios from 'axios';
import { 
  Box,
  Typography,
  Paper,
  Divider,
  Grid,
  Container,
  styled,
  Card,
  CardContent,
  CardActionArea,
  Button,
  Avatar,
  List,
  ListItem,
  ListItemAvatar,
  ListItemText,
  Chip,
  LinearProgress,
  IconButton,
  Tooltip
} from '@mui/material';
import { 
  LocalHospital as HospitalIcon,
  PersonSearch as ScreeningIcon,
  QueueMusic as QueueIcon,

  PriorityHigh as UrgentIcon,
 
  CheckCircle as CheckIcon,
  Schedule as ScheduleIcon,

  MonitorHeart as VitalIcon,
  MeetingRoom as RoomIcon,
  PersonAddAlt1 as AddPatientIcon,
  HowToReg as AuthenIcon,
  ContentPaste as ScreeningFormIcon,
  Grading as TriageIcon,
  ReceiptLong as QueueDisplayIcon,
  EventNote as QueueManageIcon,
  Refresh as RefreshIcon,
  ArrowForward as ArrowIcon
} from '@mui/icons-material';

const StyledPaper = styled(Paper)(({ theme }) => ({
  padding: theme.spacing(3),
  textAlign: 'center',
  height: '100%',
  display: 'flex',
  flexDirection: 'column',
  justifyContent: 'center',
  transition: 'transform 0.3s, box-shadow 0.3s',
  cursor: 'pointer',
  '&:hover': {
    transform: 'translateY(-5px)',
    boxShadow: theme.shadows[8]
  }
}));

const StyledCard = styled(Card)(({ theme }) => ({
  height: '100%',
  display: 'flex',
  flexDirection: 'column',
  transition: 'transform 0.3s, box-shadow 0.3s',
  '&:hover': {
    transform: 'translateY(-3px)',
    boxShadow: theme.shadows[6]
  }
}));

const Dashboard: React.FC = () => {
  const navigate = useNavigate();
  const [stats, setStats] = useState({
    emergency: 0,
    waiting: 0,
    screened: 0,
    inQueue: 0,
    totalPatients: 0,
    activeRooms: 0
  });
  const [recentPatients, setRecentPatients] = useState<any[]>([]);
  const [departmentStats, setDepartmentStats] = useState<any>({});
  const [systemInfo, setSystemInfo] = useState<any>({});
  const [loading, setLoading] = useState(true);
  const [lastUpdated, setLastUpdated] = useState<Date>(new Date());

  const API_BASE_URL = import.meta.env.VITE_API_URL || 'http://localhost:5000';

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• dashboard ‡∏à‡∏≤‡∏Å API
  const fetchDashboardData = async () => {
    try {
      console.log('üîÑ Fetching dashboard data from API...');
      const response = await axios.get(`${API_BASE_URL}/api/queue-logs/dashboard/stats`);
      
      console.log('üìä API Response:', response.data);
      
      if (response.data.success) {
        const { stats: apiStats, recent_patients, department_stats, system_info } = response.data;
        
        setStats({
          emergency: apiStats.emergency || 0,
          waiting: apiStats.waiting || 0,
          screened: apiStats.screened || 0,
          inQueue: apiStats.inQueue || 0,
          totalPatients: apiStats.totalPatients || 0,
          activeRooms: apiStats.activeRooms || 0
        });
        
        setRecentPatients(recent_patients || []);
        setDepartmentStats(department_stats || {});
        setSystemInfo(system_info || {});
        
        console.log('‚úÖ Dashboard data loaded successfully from API');
        return true;
      } else {
        throw new Error(response.data.error || 'API returned success: false');
      }
    } catch (err) {
      console.error('‚ùå API Error:', err);
      
      // ‡∏ñ‡πâ‡∏≤ API ‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ mock data ‡πÄ‡∏õ‡πá‡∏ô fallback
      console.log('üîÑ Using fallback mock data...');
      const mockStats = {
        emergency: 2,
        waiting: 5,
        screened: 10,
        inQueue: 7,
        totalPatients: 20,
        activeRooms: 3
      };
      setStats(mockStats);
      
      // Mock recent patients
      setRecentPatients([
        {
          id: '1',
          prefix: '‡∏ô‡∏≤‡∏¢',
          firstNameTh: '‡∏™‡∏°‡∏ä‡∏≤‡∏¢',
          lastNameTh: '‡πÉ‡∏à‡∏î‡∏µ',
          age: 35,
          gender: '‡∏ä‡∏≤‡∏¢',
          phone: '0812345678',
          bloodType: 'O',
          chronicDiseases: ['‡πÄ‡∏ö‡∏≤‡∏´‡∏ß‡∏≤‡∏ô'],
          profileImage: '',
          queue_number: 'A001',
          queue_status: 'waiting',
          queue_priority: 2
        },
        {
          id: '2',
          prefix: '‡∏ô‡∏≤‡∏á‡∏™‡∏≤‡∏ß',
          firstNameTh: '‡∏™‡∏≤‡∏¢‡πÉ‡∏à',
          lastNameTh: '‡∏™‡∏∏‡∏Ç‡πÉ‡∏à',
          age: 28,
          gender: '‡∏´‡∏ç‡∏¥‡∏á',
          phone: '0898765432',
          bloodType: 'A',
          chronicDiseases: [],
          profileImage: '',
          queue_number: 'A002',
          queue_status: 'waiting',
          queue_priority: 3
        }
      ]);
      
      setDepartmentStats({});
      setSystemInfo({ system_status: 'offline' });
      
      console.log('‚ö†Ô∏è Fallback to mock data completed');
      return false;
    }
  };

  useEffect(() => {
    const loadData = async () => {
      setLoading(true);
      try {
        await fetchDashboardData();
      } catch (error) {
        console.error('Error loading dashboard data:', error);
      } finally {
        setLastUpdated(new Date());
        setLoading(false);
      }
    };
    
    loadData();
    
    // Auto refresh every 30 seconds
    const interval = setInterval(loadData, 30000);
    
    return () => clearInterval(interval);
  }, []);

  const handleRefresh = async () => {
    setLoading(true);
    try {
      await fetchDashboardData();
    } catch (error) {
      console.error('Error refreshing dashboard data:', error);
    } finally {
      setLastUpdated(new Date());
      setLoading(false);
    }
  };

  const navigateTo = (path: string) => {
    navigate(path);
  };



  return (
    <Box sx={{ minHeight: '100vh', bgcolor: 'background.default' }}>
      <Container maxWidth="lg">
        {/* Header Section */}
        <Box sx={{ py: 4, textAlign: 'center' }}>
          <Typography 
            variant="h3" 
            component="h1" 
            gutterBottom
            sx={{ 
              fontWeight: 'bold',
              color: 'primary.main',
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
              gap: 2
            }}
          >
            <HospitalIcon sx={{ fontSize: 60, color: '#e53e3e' }} />
            ‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏±‡∏î‡∏Å‡∏£‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Ñ‡∏¥‡∏ß‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏™‡∏π‡∏á‡∏≠‡∏≤‡∏¢‡∏∏
          </Typography>
          <Typography variant="h6" color="text.secondary">
            ‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏±‡∏î‡∏Å‡∏£‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏î‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Ñ‡∏¥‡∏ß‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤
          </Typography>
        </Box>

        {/* Last updated and refresh button */}
        <Box sx={{ display: 'flex', justifyContent: 'flex-end', alignItems: 'center', mb: 2 }}>
          <Typography variant="body2" color="text.secondary" sx={{ mr: 2 }}>
            ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: {lastUpdated.toLocaleTimeString('th-TH')}
          </Typography>
          <Tooltip title="‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•">
            <IconButton onClick={handleRefresh} color="primary" sx={{ bgcolor: 'background.paper' }}>
              <RefreshIcon />
            </IconButton>
          </Tooltip>
        </Box>

        {/* Quick Stats Section */}
        <Grid container spacing={3} sx={{ mb: 4 }}>
          <Grid item xs={12} sm={6} md={3}>
            <Paper 
              elevation={2} 
              sx={{ 
                p: 3, 
                textAlign: 'center',
                bgcolor: 'error.light',
                color: 'error.contrastText'
              }}
            >
              <UrgentIcon sx={{ fontSize: 40, mb: 1 }} />
              <Typography variant="h4" fontWeight="bold">{stats.emergency}</Typography>
              <Typography variant="body2">‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô</Typography>
              {loading && <LinearProgress color="inherit" sx={{ mt: 1 }} />}
            </Paper>
          </Grid>
          <Grid item xs={12} sm={6} md={3}>
            <Paper 
              elevation={2} 
              sx={{ 
                p: 3, 
                textAlign: 'center',
                bgcolor: 'warning.light',
                color: 'warning.contrastText'
              }}
            >
              <ScheduleIcon sx={{ fontSize: 40, mb: 1 }} />
              <Typography variant="h4" fontWeight="bold">{stats.waiting}</Typography>
              <Typography variant="body2">‡∏£‡∏≠‡∏Ñ‡∏±‡∏î‡∏Å‡∏£‡∏≠‡∏á</Typography>
              {loading && <LinearProgress color="inherit" sx={{ mt: 1 }} />}
            </Paper>
          </Grid>
          <Grid item xs={12} sm={6} md={3}>
            <Paper 
              elevation={2} 
              sx={{ 
                p: 3, 
                textAlign: 'center',
                bgcolor: 'success.light',
                color: 'success.contrastText'
              }}
            >
              <CheckIcon sx={{ fontSize: 40, mb: 1 }} />
              <Typography variant="h4" fontWeight="bold">{stats.screened}</Typography>
              <Typography variant="body2">‡∏Ñ‡∏±‡∏î‡∏Å‡∏£‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß</Typography>
              {loading && <LinearProgress color="inherit" sx={{ mt: 1 }} />}
            </Paper>
          </Grid>
          <Grid item xs={12} sm={6} md={3}>
            <Paper 
              elevation={2} 
              sx={{ 
                p: 3, 
                textAlign: 'center',
                bgcolor: 'info.light',
                color: 'info.contrastText'
              }}
            >
              <QueueIcon sx={{ fontSize: 40, mb: 1 }} />
              <Typography variant="h4" fontWeight="bold">{stats.inQueue}</Typography>
              <Typography variant="body2">‡∏Ñ‡∏¥‡∏ß‡∏£‡∏≠‡∏£‡∏±‡∏Å‡∏©‡∏≤</Typography>
              {loading && <LinearProgress color="inherit" sx={{ mt: 1 }} />}
            </Paper>
          </Grid>
        </Grid>

        {/* Main Content */}
        <Grid container spacing={4}>
          {/* Left Column */}
          <Grid item xs={12} md={8}>
            {/* Quick Actions */}
            <Typography variant="h5" sx={{ mb: 2, fontWeight: 'medium' }}>
              ‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£
            </Typography>
            <Grid container spacing={3} sx={{ mb: 4 }}>
              <Grid item xs={12} sm={6}>
                <StyledCard>
                  <CardActionArea 
                    onClick={() => navigateTo('/member/patient/addpatient')}
                    sx={{ height: '100%', p: 2 }}
                  >
                    <CardContent sx={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>
                      <Avatar sx={{ bgcolor: 'primary.main', width: 60, height: 60, mb: 2 }}>
                        <AddPatientIcon sx={{ fontSize: 30 }} />
                      </Avatar>
                      <Typography variant="h6" component="div" gutterBottom>
                        ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡πÉ‡∏´‡∏°‡πà
                      </Typography>
                      <Typography variant="body2" color="text.secondary">
                        ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö
                      </Typography>
                    </CardContent>
                  </CardActionArea>
                </StyledCard>
              </Grid>
              <Grid item xs={12} sm={6}>
                <StyledCard>
                  <CardActionArea 
                    onClick={() => navigateTo('/Screening/AuthenPatient')}
                    sx={{ height: '100%', p: 2 }}
                  >
                    <CardContent sx={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>
                      <Avatar sx={{ bgcolor: 'secondary.main', width: 60, height: 60, mb: 2 }}>
                        <AuthenIcon sx={{ fontSize: 30 }} />
                      </Avatar>
                      <Typography variant="h6" component="div" gutterBottom>
                        ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢
                      </Typography>
                      <Typography variant="body2" color="text.secondary">
                        ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏±‡∏î‡∏Å‡∏£‡∏≠‡∏á
                      </Typography>
                    </CardContent>
                  </CardActionArea>
                </StyledCard>
              </Grid>
              <Grid item xs={12} sm={6}>
                <StyledCard>
                  <CardActionArea 
                    onClick={() => navigateTo('/Screening/Patient')}
                    sx={{ height: '100%', p: 2 }}
                  >
                    <CardContent sx={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>
                      <Avatar sx={{ bgcolor: 'success.main', width: 60, height: 60, mb: 2 }}>
                        <ScreeningFormIcon sx={{ fontSize: 30 }} />
                      </Avatar>
                      <Typography variant="h6" component="div" gutterBottom>
                        ‡∏Ñ‡∏±‡∏î‡∏Å‡∏£‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢
                      </Typography>
                      <Typography variant="body2" color="text.secondary">
                        ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏ä‡∏µ‡∏û‡πÅ‡∏•‡∏∞‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô
                      </Typography>
                    </CardContent>
                  </CardActionArea>
                </StyledCard>
              </Grid>
              <Grid item xs={12} sm={6}>
                <StyledCard>
                  <CardActionArea 
                    onClick={() => navigateTo('/queue/manage')}
                    sx={{ height: '100%', p: 2 }}
                  >
                    <CardContent sx={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>
                      <Avatar sx={{ bgcolor: 'warning.main', width: 60, height: 60, mb: 2 }}>
                        <QueueManageIcon sx={{ fontSize: 30 }} />
                      </Avatar>
                      <Typography variant="h6" component="div" gutterBottom>
                        ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏¥‡∏ß
                      </Typography>
                      <Typography variant="body2" color="text.secondary">
                        ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏¥‡∏ß‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏ï‡∏≤‡∏°‡∏´‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à‡πÅ‡∏•‡∏∞‡πÅ‡∏ú‡∏ô‡∏Å
                      </Typography>
                    </CardContent>
                  </CardActionArea>
                </StyledCard>
              </Grid>
            </Grid>

            {/* Recent Patients */}
            <Box sx={{ mb: 4 }}>
              <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
                <Typography variant="h5" sx={{ fontWeight: 'medium' }}>
                  ‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
                </Typography>
                <Button 
                  endIcon={<ArrowIcon />} 
                  onClick={() => navigateTo('/data')}
                >
                  ‡∏î‡∏π‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
                </Button>
              </Box>
              <Paper elevation={2}>
                {loading ? (
                  <Box sx={{ p: 2 }}>
                    <LinearProgress />
                    <Typography variant="body2" sx={{ textAlign: 'center', mt: 2 }}>
                      ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...
                    </Typography>
                  </Box>
                ) : recentPatients.length > 0 ? (
                  <List>
                    {recentPatients.map((patient, index) => (
                      <React.Fragment key={patient.id || index}>
                        <ListItem 
                          alignItems="flex-start"
                          secondaryAction={
                            <Button 
                              variant="outlined" 
                              size="small"
                              onClick={() => navigateTo(`/member/patient/dataPatient/${patient.id}`)}
                            >
                              ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                            </Button>
                          }
                        >
                          <ListItemAvatar>
                            <Avatar 
                              src={patient.profileImage} 
                              alt={`${patient.prefix} ${patient.firstNameTh}`}
                              sx={{ bgcolor: 'primary.main' }}
                            >
                              {patient.firstNameTh?.charAt(0) || 'P'}
                            </Avatar>
                          </ListItemAvatar>
                          <ListItemText
                            primary={
                              <Typography variant="subtitle1" fontWeight="medium">
                                {patient.prefix} {patient.firstNameTh} {patient.lastNameTh}
                              </Typography>
                            }
                            secondary={
                              <React.Fragment>
                                <Typography variant="body2" component="span" color="text.primary">
                                  ‡∏≠‡∏≤‡∏¢‡∏∏: {patient.age} ‡∏õ‡∏µ | {patient.gender}
                                </Typography>
                                <Typography variant="body2" component="div" color="text.secondary">
                                  ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£: {patient.phone}
                                  {patient.bloodType && ` | ‡∏Å‡∏£‡∏∏‡πä‡∏õ‡πÄ‡∏•‡∏∑‡∏≠‡∏î: ${patient.bloodType}`}
                                </Typography>
                                {/* ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏¥‡∏ß */}
                                {patient.queue_number && (
                                  <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mt: 1 }}>
                                    <Chip 
                                      label={`‡∏Ñ‡∏¥‡∏ß: ${patient.queue_number}`}
                                      size="small"
                                      color={patient.queue_status === 'waiting' ? 'warning' : 
                                             patient.queue_status === 'in_progress' ? 'info' : 'default'}
                                    />
                                    {patient.queue_priority === 1 && (
                                      <Chip 
                                        label="‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô"
                                        size="small"
                                        color="error"
                                        icon={<UrgentIcon />}
                                      />
                                    )}
                                    {patient.queue_priority === 2 && (
                                      <Chip 
                                        label="‡πÄ‡∏£‡πà‡∏á‡∏î‡πà‡∏ß‡∏ô"
                                        size="small"
                                        color="warning"
                                      />
                                    )}
                                  </Box>
                                )}
                                {patient.chronicDiseases && patient.chronicDiseases.length > 0 && (
                                  <Box sx={{ mt: 0.5 }}>
                                    {patient.chronicDiseases.slice(0, 2).map((disease: string, i: number) => (
                                      <Chip 
                                        key={i} 
                                        label={disease} 
                                        size="small" 
                                        color="primary" 
                                        variant="outlined"
                                        sx={{ mr: 0.5, mb: 0.5 }}
                                      />
                                    ))}
                                    {patient.chronicDiseases.length > 2 && (
                                      <Chip 
                                        label={`+${patient.chronicDiseases.length - 2}`} 
                                        size="small" 
                                        color="default" 
                                        variant="outlined"
                                        sx={{ mr: 0.5, mb: 0.5 }}
                                      />
                                    )}
                                  </Box>
                                )}
                              </React.Fragment>
                            }
                          />
                        </ListItem>
                        {index < recentPatients.length - 1 && <Divider variant="inset" component="li" />}
                      </React.Fragment>
                    ))}
                  </List>
                ) : (
                  <Box sx={{ p: 4, textAlign: 'center' }}>
                    <Typography variant="body1" color="text.secondary">
                      ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢
                    </Typography>
                    <Button 
                      variant="contained" 
                      sx={{ mt: 2 }}
                      onClick={() => navigateTo('/member/patient/addpatient')}
                    >
                      ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡πÉ‡∏´‡∏°‡πà
                    </Button>
                  </Box>
                )}
              </Paper>
            </Box>
          </Grid>

          {/* Right Column */}
          <Grid item xs={12} md={4}>
            {/* System Status */}
            <Typography variant="h5" sx={{ mb: 2, fontWeight: 'medium' }}>
              ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö
            </Typography>
            <Paper elevation={2} sx={{ p: 3, mb: 4 }}>
              <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
                <RoomIcon color="primary" sx={{ mr: 1 }} />
                <Typography variant="h6">‡∏´‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£</Typography>
              </Box>
              <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', mb: 2 }}>
                <Typography variant="h2" color="primary.main" fontWeight="bold">
                  {stats.activeRooms}
                </Typography>
                <Typography variant="body1" color="text.secondary" sx={{ ml: 1 }}>
                  ‡∏´‡πâ‡∏≠‡∏á
                </Typography>
              </Box>
              <Divider sx={{ my: 2 }} />
              <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 1 }}>
                <Typography variant="body1">‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö:</Typography>
                <Typography variant="body1" fontWeight="bold">{stats.totalPatients} ‡∏Ñ‡∏ô</Typography>
              </Box>
              <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 1 }}>
                <Typography variant="body1">‡∏Ñ‡∏¥‡∏ß‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏≠:</Typography>
                <Typography variant="body1" fontWeight="bold">{stats.inQueue} ‡∏Ñ‡∏¥‡∏ß</Typography>
              </Box>
              <Box sx={{ mt: 3 }}>
                <Button 
                  variant="outlined" 
                  fullWidth
                  onClick={() => navigateTo('/queue/showqueue')}
                  startIcon={<QueueDisplayIcon />}
                >
                  ‡∏î‡∏π‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏¥‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
                </Button>
              </Box>
            </Paper>

            {/* Department Stats */}
            {Object.keys(departmentStats).length > 0 && (
              <>
                <Typography variant="h5" sx={{ mb: 2, fontWeight: 'medium' }}>
                  ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ï‡∏≤‡∏°‡πÅ‡∏ú‡∏ô‡∏Å
                </Typography>
                <Paper elevation={2} sx={{ p: 3, mb: 4 }}>
                  {Object.entries(departmentStats).map(([deptId, dept]: [string, any]) => (
                    <Box key={deptId} sx={{ mb: 2, pb: 2, borderBottom: '1px solid #e0e0e0' }}>
                      <Typography variant="subtitle1" fontWeight="medium" gutterBottom>
                        {dept.name}
                      </Typography>
                      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                        <Box sx={{ flex: 1 }}>
                          <Typography variant="body2" color="text.secondary">
                            ‡∏Ñ‡∏¥‡∏ß‡∏£‡∏≠: {dept.waiting_count} | ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ: {dept.total_today} | ‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡∏¥‡∏î: {dept.active_rooms}
                          </Typography>
                        </Box>
                        <Box sx={{ display: 'flex', gap: 1 }}>
                          {dept.waiting_count > 5 && (
                            <Chip label="‡∏Ñ‡∏¥‡∏ß‡πÄ‡∏¢‡∏≠‡∏∞" size="small" color="warning" />
                          )}
                          {dept.active_rooms === 0 && (
                            <Chip label="‡∏õ‡∏¥‡∏î‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£" size="small" color="error" />
                          )}
                        </Box>
                      </Box>
                    </Box>
                  ))}
                </Paper>
              </>
            )}

            {/* Quick Links */}
            <Typography variant="h5" sx={{ mb: 2, fontWeight: 'medium' }}>
              ‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏î‡πà‡∏ß‡∏ô
            </Typography>
            <Grid container spacing={2} sx={{ mb: 4 }}>
              <Grid item xs={6}>
                <StyledPaper 
                  elevation={2}
                  onClick={() => navigateTo('/member/patient/searchpatient')}
                >
                  <ScreeningIcon color="primary" sx={{ fontSize: 40, mb: 1 }} />
                  <Typography variant="body1" fontWeight="medium">‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢</Typography>
                </StyledPaper>
              </Grid>
              <Grid item xs={6}>
                <StyledPaper 
                  elevation={2}
                  onClick={() => navigateTo('/Screening/Patient2')}
                >
                  <TriageIcon color="error" sx={{ fontSize: 40, mb: 1 }} />
                  <Typography variant="body1" fontWeight="medium">‡∏Ñ‡∏±‡∏î‡πÅ‡∏¢‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó</Typography>
                </StyledPaper>
              </Grid>
              <Grid item xs={6}>
                <StyledPaper 
                  elevation={2}
                  onClick={() => navigateTo('/welcome')}
                >
                  <VitalIcon color="success" sx={{ fontSize: 40, mb: 1 }} />
                  <Typography variant="body1" fontWeight="medium">‡∏£‡∏∞‡∏ö‡∏ö‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢</Typography>
                </StyledPaper>
              </Grid>
              <Grid item xs={6}>
                <StyledPaper 
                  elevation={2}
                  onClick={() => navigateTo('/queue/manage/room')}
                >
                  <RoomIcon color="warning" sx={{ fontSize: 40, mb: 1 }} />
                  <Typography variant="body1" fontWeight="medium">‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏´‡πâ‡∏≠‡∏á</Typography>
                </StyledPaper>
              </Grid>
            </Grid>

            {/* System Info */}
            <Paper elevation={2} sx={{ p: 3, bgcolor: 'primary.light', color: 'primary.contrastText' }}>
              <Typography variant="h6" gutterBottom>
                ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏∞‡∏ö‡∏ö
              </Typography>
              <Typography variant="body2" paragraph>
                ‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏±‡∏î‡∏Å‡∏£‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Ñ‡∏¥‡∏ß‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ ‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô
              </Typography>
              <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 1 }}>
                <Typography variant="body2">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö:</Typography>
                <Chip 
                  label={systemInfo.system_status === 'online' ? '‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå' : '‡∏≠‡∏≠‡∏ü‡πÑ‡∏•‡∏ô‡πå'} 
                  size="small" 
                  color={systemInfo.system_status === 'online' ? 'success' : 'error'}
                  sx={{ bgcolor: 'white', color: systemInfo.system_status === 'online' ? 'green' : 'red' }}
                />
              </Box>
              {systemInfo.total_logs_today && (
                <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 1 }}>
                  <Typography variant="body2">‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ:</Typography>
                  <Typography variant="body2" fontWeight="bold">{systemInfo.total_logs_today} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</Typography>
                </Box>
              )}
              <Typography variant="body2">
                ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô: 1.0.0 | ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: {new Date().toLocaleDateString('th-TH')}
              </Typography>
            </Paper>
          </Grid>
        </Grid>
      </Container>
    </Box>
  );
};

export default Dashboard;
